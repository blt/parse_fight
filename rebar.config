%% == Core ==

%% Additional library directories to add to the code path
{lib_dirs, []}.

%% == Erlang Compiler ==

%% Erlang files to compile before the rest. Rebar automatically compiles
%% parse_transforms and custom behaviours before anything other than the files
%% in this list.
{erl_first_files, []}.

%% Erlang compiler options
%% {erl_opts, [no_debug_info, {i, "myinclude"}, {src_dirs, ["src1", "src2"]},
%%             {platform_define,
%%             "(linux|solaris|freebsd|darwin)", 'HAVE_SENDFILE'},
%%             {platform_define, "(linux|freebsd)", 'BACKLOG', 128},
%%             {platform_define, "R13", 'old_inets'}]}.
{erl_opts, [
        debug_info,
        warn_obsolete_guard,
        warn_unused_import,
        warn_shadow_vars,
        warn_export_vars,
        warn_export_all,
        {parse_transform, lager_transform},
        {parse_transform, autohelp}
    ]}.


%% == EDoc ==

%% EDoc options
{edoc_opts, []}.

%% == LFE Compiler ==

%% LFE files to compile before the rest
{lfe_first_files, []}.

%% Options for the LFE compiler: reuse {erl_opts, []}

%% == OTP Applications ==

%% Binaries to link into the erlang path?
{app_bin, []}.

%% == Dependancies ==

%% Where to put any downloaded depandencies. Default is `deps`
{deps_dir, ["deps"]}.

%% What dependancies we have, depandencies can be of 3 forms, an application
%% name as an atom, eg. mochiweb, a name and a version (from the .app file), or
%% an application name, a version and the SCM details on how to fetch it (SCM
%% type, location and revision). Rebar currently support git, hg, bzr and svn.
%% {deps, [application_name,
%%         {application_name, "1.0.*"},
%%         {application_name, "1.0.*",
%%          {git, "git://github.com/basho/rebar.git", {branch, "master"}}}]}.
{deps, [
    {lager,        ".*", {git, "git://github.com/basho/lager.git",              {tag, "1.2.0"}}},
    {autohelp,     ".*", {git, "git://github.com/stolen/autohelp.git",          {tag, "ec1d45fe"}}}
]}.

%% == xref ==

{xref_warnings, false}.

%% xref checks to run
{xref_checks, [undefined_function_calls, deprecated_function_calls]}.
